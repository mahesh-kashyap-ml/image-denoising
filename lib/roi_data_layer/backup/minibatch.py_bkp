# --------------------------------------------------------
# Fast R-CNN
# Copyright (c) 2015 Microsoft
# Licensed under The MIT License [see LICENSE for details]
# Written by Ross Girshick and Xinlei Chen
# --------------------------------------------------------

"""Compute minibatch blobs for training a Fast R-CNN network."""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import numpy.random as npr
import cv2
from model.config import cfg
from utils.blob import prep_im_for_blob, im_list_to_blob
from skimage.util import random_noise
from skimage.restoration import (denoise_wavelet, estimate_sigma)
from sklearn.cluster import MiniBatchKMeans
from scipy.stats import uniform
from scipy.stats import gamma
from scipy.stats import rayleigh
from skimage import img_as_float
#from skimage.metrics import peak_signal_noise_ratio


def get_minibatch(roidb, num_classes):
  """Given a roidb, construct a minibatch sampled from it."""
  num_images = len(roidb)
  # Sample random scales to use for each image in this batch
  random_scale_inds = npr.randint(0, high=len(cfg.TRAIN.SCALES),
                  size=num_images)
  assert(cfg.TRAIN.BATCH_SIZE % num_images == 0), \
    'num_images ({}) must divide BATCH_SIZE ({})'. \
    format(num_images, cfg.TRAIN.BATCH_SIZE)

  # Get the input image blob, formatted for caffe
  im_blob, im_scales = _get_image_blob(roidb, random_scale_inds)

  blobs = {'data': im_blob}

  assert len(im_scales) == 1, "Single batch only"
  assert len(roidb) == 1, "Single batch only"
  
  # gt boxes: (x1, y1, x2, y2, cls)
  if cfg.TRAIN.USE_ALL_GT:
    # Include all ground truth boxes
    gt_inds = np.where(roidb[0]['gt_classes'] != 0)[0]
  else:
    # For the COCO ground truth boxes, exclude the ones that are ''iscrowd'' 
    gt_inds = np.where(roidb[0]['gt_classes'] != 0 & np.all(roidb[0]['gt_overlaps'].toarray() > -1.0, axis=1))[0]
  gt_boxes = np.empty((len(gt_inds), 5), dtype=np.float32)
  gt_boxes[:, 0:4] = roidb[0]['boxes'][gt_inds, :] * im_scales[0]
  gt_boxes[:, 4] = roidb[0]['gt_classes'][gt_inds]
  blobs['gt_boxes'] = gt_boxes
  blobs['im_info'] = np.array(
    [im_blob.shape[1], im_blob.shape[2], im_scales[0]],
    dtype=np.float32)

  return blobs

def _get_image_blob(roidb, scale_inds):
  """Builds an input blob from the images in the roidb at the specified
  scales.
  """
  num_images = len(roidb)
  processed_ims = []
  im_scales = []
  for i in range(num_images):
    if ('gaussian' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        if ('gaussian_wavelet' in roidb[i]['noise_type']):
            if ('var0.4' in roidb[i]['noise_type']):
                im_noise = random_noise(img, mode='gaussian', var=0.4)
                print('gaussian wavelet var 0.4')
            elif ('var1.0' in roidb[i]['noise_type']):
                im_noise = random_noise(img, mode='gaussian', var=1.0)
                print('gaussian wavelet var 1.0')
            elif ('var1.5' in roidb[i]['noise_type']):
                im_noise = random_noise(img, mode='gaussian', var=1.5)
                print('gaussian wavelet var 1.5')
        else:
            if ('var0.4' in roidb[i]['noise_type']):
                gauss_array = random_noise(img, mode='gaussian', var=0.4)
                im = (255 * gauss_array).astype(np.uint8)
                print('gaussian var 0.4')
            elif ('var1.0' in roidb[i]['noise_type']):
                gauss_array = random_noise(img, mode='gaussian', var=1.0)
                im = (255 * gauss_array).astype(np.uint8)
                print('gaussian var 1.0')
            elif ('var1.5' in roidb[i]['noise_type']):
                gauss_array = random_noise(img, mode='gaussian', var=1.5)
                im = (255 * gauss_array).astype(np.uint8)
                print('gaussian var 1.5')
        print("Gaussian")
    elif (roidb[i]['noise_type'] == 'poisson'):
        img = cv2.imread(roidb[i]['image'])
        #introduce poisson noise.
        #also called shot noise originates from the discrete nature of electronic charge or photons.
        pois_array = random_noise(img, mode='poisson')
        im = (255 * pois_array).astype(np.uint8)
    elif ('sp' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        if ('sp_wavelet' in roidb[i]['noise_type']):
            if ('var0.2' in roidb[i]['noise_type']):
                sp_array = random_noise(img, mode='s&p', amount=0.2)
                im_bayes = denoise_wavelet(sp_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)
                print('wavelet')
                print('s&p wavelet var 0.2')
            elif ('var0.4' in roidb[i]['noise_type']):
                sp_array = random_noise(img, mode='s&p', amount=0.4)
                im_bayes = denoise_wavelet(sp_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)
                print('wavelet')
                print('s&p wavelet var 0.4')
            elif ('var0.8' in roidb[i]['noise_type']):
                sp_array = random_noise(img, mode='s&p', amount=0.8)
                im_bayes = denoise_wavelet(sp_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)
                print('wavelet')
                print('s&p wavelet var 0.8')
        else:
            if ('var0.2' in roidb[i]['noise_type']):
                sp_array = random_noise(img, mode='s&p', amount=0.2)
                im = (255 * sp_array).astype(np.uint8)
                print('s&p var 0.2')
            elif ('var0.4' in roidb[i]['noise_type']):
                sp_array = random_noise(img, mode='s&p', amount=0.4)
                im = (255 * sp_array).astype(np.uint8)
                print('s&p var 0.4')
            elif ('var0.8' in roidb[i]['noise_type']):
                sp_array = random_noise(img, mode='s&p', amount=0.8)
                im = (255 * sp_array).astype(np.uint8)
                print('s&p var 0.8')
        print("salt & pepper")
    elif ('speckle' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        if ('speckle_wavelet' in roidb[i]['noise_type']):
            if ('var0.5' in roidb[i]['noise_type']):
                speck_array = random_noise(img, mode='speckle', var=0.5)
                im_bayes = denoise_wavelet(speck_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('speckle wavelet var 0.4')
            elif ('var1.0' in roidb[i]['noise_type']):
                speck_array = random_noise(img, mode='speckle', var=1.0)
                im_bayes = denoise_wavelet(speck_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('speckle wavelet var 1.0')
            elif ('var2.0' in roidb[i]['noise_type']):
                speck_array = random_noise(img, mode='speckle', var=2.0)
                im_bayes = denoise_wavelet(speck_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('speckle wavelet var 2.0')
        else:
            if ('var0.5' in roidb[i]['noise_type']):
                speck_array = random_noise(img, mode='speckle', var=0.5)
                im = (255 * speck_array).astype(np.uint8)
                print('speckle var 0.5')
            elif ('var1.0' in roidb[i]['noise_type']):
                speck_array = random_noise(img, mode='speckle', var=1.0)
                im = (255 * speck_array).astype(np.uint8)
                print('speckle var 1.0')
            elif ('var2.0' in roidb[i]['noise_type']):
                speck_array = random_noise(img, mode='speckle', var=2.0)
                im = (255 * speck_array).astype(np.uint8)
                print('speckle var 2.0')
        print("Speckle")    
    elif ('quant' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        img = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
        #clor quantization, using K-Means clustering. 
        #Usually this noise is found while converting analog to digital, or continuous random variable to discreate.
        image = img.reshape((img.shape[0] * img.shape[1], 3))
        if ('quant_wavelet' in roidb[i]['noise_type']):
            if ('var3' in roidb[i]['noise_type']):
                clt = MiniBatchKMeans(n_clusters= 3)
                labels = clt.fit_predict(image)
                quant = clt.cluster_centers_.astype("uint8")[labels]
                quant = quant.reshape(h, w, 3)
                quant_array = cv2.cvtColor(quant, cv2.COLOR_LAB2BGR)
                im_bayes = denoise_wavelet(quant_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('quantization wavelet with cluster 3')
            elif ('var7' in roidb[i]['noise_type']):
                clt = MiniBatchKMeans(n_clusters= 7)
                labels = clt.fit_predict(image)
                quant = clt.cluster_centers_.astype("uint8")[labels]
                quant = quant.reshape(h, w, 3)
                quant_array = cv2.cvtColor(quant, cv2.COLOR_LAB2BGR)
                im_bayes = denoise_wavelet(quant_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('quantization wavelet with cluster 7')
            elif ('var10' in roidb[i]['noise_type']):
                clt = MiniBatchKMeans(n_clusters= 10)
                labels = clt.fit_predict(image)
                quant = clt.cluster_centers_.astype("uint8")[labels]
                quant = quant.reshape(h, w, 3)
                quant_array = cv2.cvtColor(quant, cv2.COLOR_LAB2BGR)
                im_bayes = denoise_wavelet(quant_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('quantization wavelet with cluster 10')
        else:
            if ('var3' in roidb[i]['noise_type']):                
                clt = MiniBatchKMeans(n_clusters= 3)
                labels = clt.fit_predict(image)
                quant = clt.cluster_centers_.astype("uint8")[labels]
                quant = quant.reshape(h, w, 3)
                im = cv2.cvtColor(quant, cv2.COLOR_LAB2BGR)
                print('quantization with cluster 3')
            elif ('var7' in roidb[i]['noise_type']):
                clt = MiniBatchKMeans(n_clusters= 7)
                labels = clt.fit_predict(image)
                quant = clt.cluster_centers_.astype("uint8")[labels]
                quant = quant.reshape(h, w, 3)
                im = cv2.cvtColor(quant, cv2.COLOR_LAB2BGR)
                print('quantization with cluster 7')
            elif ('var10' in roidb[i]['noise_type']):
                clt = MiniBatchKMeans(n_clusters= 10)
                labels = clt.fit_predict(image)
                quant = clt.cluster_centers_.astype("uint8")[labels]
                quant = quant.reshape(h, w, 3)
                im = cv2.cvtColor(quant, cv2.COLOR_LAB2BGR)
                print('quantization with cluster 10')
        print("Quantization")
    elif('uniform' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        image = img_as_float(img)
        if ('uniform_wavelet' in roidb[i]['noise_type']):
            if ('var0.2' in roidb[i]['noise_type']):
                uniform_array = np.random.uniform(low=0., high=0.2, size=img.shape)
                im_noise = cv2.add(image, uniform_array)
                im_bayes = denoise_wavelet(im_noise, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)
                print('wavelet')
                print('uniform wavelet var 0.2')
            elif ('var0.6' in roidb[i]['noise_type']):
                uniform_array = np.random.uniform(low=0., high=0.6, size=img.shape)
                im_noise = cv2.add(image, uniform_array)
                im_bayes = denoise_wavelet(im_noise, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)
                print('wavelet')
                print('uniform wavelet var 0.6')
            elif ('var1.2' in roidb[i]['noise_type']):
                uniform_array = np.random.uniform(low=0., high=1.2, size=img.shape)
                im_noise = cv2.add(image, uniform_array)
                im_bayes = denoise_wavelet(im_noise, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)
                print('wavelet')
                print('uniform wavelet var 1.2')
        else:
            if ('var0.2' in roidb[i]['noise_type']):            
                uniform_array = np.random.uniform(low=0., high=0.2, size=img.shape)
                uniform_noise = cv2.add(image, uniform_array)
                im = (255 * uniform_noise).astype(np.uint8)
                print('uniform var 0.2')
            elif ('var0.6' in roidb[i]['noise_type']):
                uniform_array = np.random.uniform(low=0., high=0.6, size=img.shape)
                uniform_noise = cv2.add(image, uniform_array)
                im = (255 * uniform_noise).astype(np.uint8)
                print('uniform var 0.6')
            elif ('var1.2' in roidb[i]['noise_type']):
                uniform_array = np.random.uniform(low=0., high=1.2, size=img.shape)
                uniform_noise = cv2.add(image, uniform_array)
                im = (255 * uniform_noise).astype(np.uint8)
                print('uniform var 1.2')
        print("uniform")
    elif(roidb[i]['noise_type'] == 'brownian'):
        img = cv2.imread(roidb[i]['image'])
        h, w = img.shape[:2]
        n=img.size
        T=n
        times = np.linspace(0., T, n)
        dt = times[1] - times[0]
        #Bt2 - Bt1 ~ Normal with mean 0 and variance t2-t1
        #brownian motion's characterstics is its independent normally distributed increments.
        dB = np.sqrt(dt) * np.random.normal(size=(n-1,))
        #brownian motion starts at zero
        B0 = np.zeros(shape=(1,))
        #brownian motion is to concatenate the intial value with the cumulative sum of the increments.
        B = np.concatenate((B0, np.cumsum(dB)))
        brownian = (B * 255).astype(np.uint8)
        brownian_noise = brownian.reshape(h,w,3)
        im_noise = cv2.add(img, brownian_noise)
    elif(roidb[i]['noise_type'] == 'periodic'):
        img = cv2.imread(roidb[i]['image'])
        h, w = img.shape[:2]
        size = img.size
        time = (np.linspace(0, size, size))
        amplitude = np.sin(time)
        periodic_array = (amplitude * 255).astype(np.uint8)
        periodic_noise = periodic_array.reshape(h,w,3)
        im_noise = cv2.add(img, periodic_noise)
    elif ('gamma' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        image = img_as_float(img)
        a = 1.99
        if ('gamma_wavelet' in roidb[i]['noise_type']):
            if ('var0.1' in roidb[i]['noise_type']):
                gamma_dist = gamma.rvs(a, loc=0., scale=0.1, size=image.shape)
                gamma_array = cv2.add(image, gamma_dist)
                im_bayes = denoise_wavelet(gamma_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('gamma wavelet var 0.1')
            elif ('var0.3' in roidb[i]['noise_type']):
                gamma_dist = gamma.rvs(a, loc=0., scale=0.3, size=image.shape)
                gamma_array = cv2.add(image, gamma_dist)
                im_bayes = denoise_wavelet(gamma_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('gamma wavelet var 0.3')
            elif ('var0.7' in roidb[i]['noise_type']):
                gamma_dist = gamma.rvs(a, loc=0., scale=0.7, size=image.shape)
                gamma_array = cv2.add(image, gamma_dist)
                im_bayes = denoise_wavelet(gamma_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('gamma wavelet var 0.7')
        else:
            if ('var0.1' in roidb[i]['noise_type']):            
                gamma_dist = gamma.rvs(a, loc=0., scale=0.1, size=image.shape)
                gamma_array = cv2.add(image, gamma_dist)
                im = (gamma_array * 255).astype(np.uint8)
                print('gamma var 0.1')
            elif ('var0.3' in roidb[i]['noise_type']):
                gamma_dist = gamma.rvs(a, loc=0., scale=0.3, size=image.shape)
                gamma_array = cv2.add(image, gamma_dist)
                im = (gamma_array * 255).astype(np.uint8)
                print('gamma var 0.3')
            elif ('var0.7' in roidb[i]['noise_type']):
                gamma_dist = gamma.rvs(a, loc=0., scale=0.7, size=image.shape)
                gamma_array = cv2.add(image, gamma_dist)
                im = (gamma_array * 255).astype(np.uint8)
                print('gamma var 0.7')
        print("Gamma")
    elif ('rayleigh' in roidb[i]['noise_type']):
        img = cv2.imread(roidb[i]['image'])
        image = img_as_float(img)
        if ('gamma_wavelet' in roidb[i]['noise_type']):
            if ('var0.1' in roidb[i]['noise_type']):
                rayleigh_dist = rayleigh.rvs(loc=0., scale=0.1, size=image.shape)                
                rayleigh_array = cv2.add(image, rayleigh_dist)                
                im_bayes = denoise_wavelet(rayleigh_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('rayleigh wavelet var 0.1')
            elif ('var0.2' in roidb[i]['noise_type']):
                rayleigh_dist = rayleigh.rvs(loc=0., scale=0.2, size=image.shape)                
                rayleigh_array = cv2.add(image, rayleigh_dist)                
                im_bayes = denoise_wavelet(rayleigh_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('rayleigh wavelet var 0.2')
            elif ('var0.3' in roidb[i]['noise_type']):
                rayleigh_dist = rayleigh.rvs(loc=0., scale=0.3, size=image.shape)                
                rayleigh_array = cv2.add(image, rayleigh_dist)                
                im_bayes = denoise_wavelet(rayleigh_array, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
                data = (255 * im_bayes)
                im = data.astype(np.uint8)                
                print('rayleigh wavelet var 0.3')
        else:
            if ('var0.1' in roidb[i]['noise_type']):         
                rayleigh_dist = rayleigh.rvs(loc=0., scale=0.1, size=image.shape)                
                rayleigh_array = cv2.add(image, rayleigh_dist)
                im = (rayleigh_array * 255).astype(np.uint8)
                print('rayleigh var 0.1')
            elif ('var0.2' in roidb[i]['noise_type']):
                rayleigh_dist = rayleigh.rvs(loc=0., scale=0.2, size=image.shape)                
                rayleigh_array = cv2.add(image, rayleigh_dist)
                im = (rayleigh_array * 255).astype(np.uint8)
                print('rayleigh var 0.2')
            elif ('var0.3' in roidb[i]['noise_type']):
                rayleigh_dist = rayleigh.rvs(loc=0., scale=0.3, size=image.shape)                
                rayleigh_array = cv2.add(image, rayleigh_dist)
                im = (rayleigh_array * 255).astype(np.uint8)
                print('rayleigh var 0.3')
        print("Rayleigh")
    elif (roidb[i]['noise_type'] == 'wavelet'):
        img = cv2.imread(roidb[i]['image'])
        #introduce gaussian noise.
        gauss_array = random_noise(img, mode='gaussian', var=0.04)
        im_noise = (255 * gauss_array).astype(np.uint8)
        #denoise with gaussian filter.
        #im = cv2.GaussianBlur(noise_im, (3,3), 0)
        #denoise with wavelet visushrink filter.
        #sigma_est = estimate_sigma(im_noise, multichannel=True, average_sigmas=True)
        im_bayes = denoise_wavelet(im_noise, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True, wavelet = 'coif5')
        data = (255 * im_bayes)
        im = data.astype(np.uint8)
        print('wavelet')
    else:
        im = cv2.imread(roidb[i]['image'])
        #introduce gaussian noise.
        print('original')


    """im_bayes = denoise_wavelet(im_noise, method='BayesShrink', mode='soft',
                                    wavelet_levels=3,
                                    multichannel= True, convert2ycbcr=True)
    data = (255 * im_bayes)
    im = data.astype(np.uint8)
    print('wavelet')"""




    #PIXEL_MEANS = np.array([[[0.36462913, 0.39009895, 0.41216644]]])



    if roidb[i]['flipped']:
      im = im[:, ::-1, :]
    target_size = cfg.TRAIN.SCALES[scale_inds[i]]
    im, im_scale = prep_im_for_blob(im, cfg.PIXEL_MEANS, target_size,
                    cfg.TRAIN.MAX_SIZE)
    im_scales.append(im_scale)
    processed_ims.append(im)

  # Create a blob to hold the input images
  blob = im_list_to_blob(processed_ims)

  return blob, im_scales
